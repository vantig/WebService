// Generated by JSON2Apex http://json2apex.herokuapp.com/
//
// The supplied json has fields with names that are not valid in apex
// and so can only be parsed with explicitly generated code, this option
// was auto selected for you.

public class JSONtoOpportunities {

    public List<Opportunity> opportunities { get; set; }

    public JSONtoOpportunities(JSONParser parser) {
        while (parser.nextToken() != System.JSONToken.END_OBJECT) {
            if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
                String text = parser.getText();
                if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
                    if (text == 'opportunities') {
                        opportunities = arrayOfOpportunities(parser);
                    } else {
                        consumeObject(parser);
                    }
                }
            }
        }
    }


    public static Opportunity getOpportunity(JSONParser parser) {
        Opportunity opp = new Opportunity();
        String sid ;
        String accountName;
        while (parser.nextToken() != System.JSONToken.END_OBJECT) {
            if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
                String text = parser.getText();
                if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
                    if (text == 'accountName') {
                        accountName = parser.getText();
                    } else if (text == 'opportunityName') {
                        opp.Name = parser.getText();
                    } else if (text == 'stage') {
                        opp.StageName = parser.getText();
                    } else if (text == 'amount') {
                        opp.Amount = parser.getDoubleValue();
                    } else if (text == 'probability') {
                        opp.Probability = parser.getIntegerValue();
                    } else if (text == 'closeDate') {
                        Datetime dT = (Datetime) JSON.deserialize(parser.getText(), Datetime.class);
                        opp.CloseDate = Date.newInstance(dT.year(), dT.month(), dT.day());
                    } else if (text == 'type') {
                        opp.Type = parser.getText();
                    } else if (text == '_sid') {
                        opp.External_Id__c = parser.getText();
                        sid = opp.External_Id__c;
                    } else {
                        consumeObject(parser);
                    }
                }
            }
        }
        if (accountName != null && accountName.length() > 0) {
            JSONtoOpportunitiesHelper.namesOfRelatedAccounts.put(sid, accountName);
        }
        return opp;
    }


    public static JSONtoOpportunities parse(String json) {
        System.JSONParser parser = System.JSON.createParser(json);
        return new JSONtoOpportunities(parser);
    }

    public static void consumeObject(System.JSONParser parser) {
        Integer depth = 0;
        do {
            System.JSONToken curr = parser.getCurrentToken();
            if (curr == System.JSONToken.START_OBJECT ||
                    curr == System.JSONToken.START_ARRAY) {
                depth++;
            } else if (curr == System.JSONToken.END_OBJECT ||
                    curr == System.JSONToken.END_ARRAY) {
                depth--;
            }
        } while (depth > 0 && parser.nextToken() != null);
    }


    private static List<Opportunity> arrayOfOpportunities(System.JSONParser p) {
        List<Opportunity> res = new List<Opportunity>();
        if (p.getCurrentToken() == null) {
            p.nextToken();
        }
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            Opportunity opp = getOpportunity(p);
            res.add(opp);
        }
        return res;
    }


}